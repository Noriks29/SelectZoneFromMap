from http.server import BaseHTTPRequestHandler, HTTPServer
import os
from pathlib import Path

class CombinedHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, vue_dist_path='dist', **kwargs):
        self.vue_dist_path = Path(vue_dist_path)
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /map/)
        if self.path.startswith('/map/'):
            self.handle_image_request()
        else:
            self.handle_vue_request()
    
    def handle_image_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            path = self.path.lstrip('/')
            full_path = path
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ —á—Ç–æ –æ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not os.path.exists(full_path) or not os.path.isfile(full_path):
                raise FileNotFoundError
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Content-Type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            ext = os.path.splitext(full_path)[1].lower()
            content_type = {
                '.jpg': 'image/jpeg',
                '.jpeg': 'image/jpeg',
                '.png': 'image/png',
                '.gif': 'image/gif'
            }.get(ext, 'application/octet-stream')
            
            # –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            with open(full_path, 'rb') as f:
                self.send_response(200)
                self.send_header('Content-type', content_type)
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(f.read())
                
        except FileNotFoundError:
            self.send_error(404, "File Not Found")
        except Exception as e:
            self.send_error(500, f"Server Error: {str(e)}")
    
    def handle_vue_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ dist
            if self.path == '/':
                file_path = self.vue_dist_path / 'index.html'
            else:
                file_path = self.vue_dist_path / self.path.lstrip('/')
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html (–¥–ª—è Vue Router)
            if not file_path.exists() or not file_path.is_file():
                file_path = self.vue_dist_path / 'index.html'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type
            ext = file_path.suffix.lower()
            content_types = {
                '.html': 'text/html',
                '.css': 'text/css',
                '.js': 'application/javascript',
                '.json': 'application/json',
                '.png': 'image/png',
                '.jpg': 'image/jpeg',
                '.jpeg': 'image/jpeg',
                '.gif': 'image/gif',
                '.svg': 'image/svg+xml',
                '.ico': 'image/x-icon'
            }
            content_type = content_types.get(ext, 'application/octet-stream')
            
            # –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                self.send_response(200)
                self.send_header('Content-type', content_type)
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(f.read())
                
        except FileNotFoundError:
            self.send_error(404, "File Not Found")
        except Exception as e:
            self.send_error(500, f"Server Error: {str(e)}")
    
    def log_message(self, format, *args):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"{self.client_address[0]} - - [{self.log_date_time_string()}] {format % args}")

class CustomHTTPServer(HTTPServer):
    def __init__(self, server_address, handler_class, vue_dist_path):
        self.vue_dist_path = vue_dist_path
        super().__init__(server_address, handler_class)
    
    def finish_request(self, request, client_address):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ handler"""
        self.RequestHandlerClass(request, client_address, self, vue_dist_path=self.vue_dist_path)

class VueLiveServer:
    def __init__(self, port=8080, host='localhost', vue_dist_path='dist'):
        self.port = port
        self.host = host
        self.vue_dist_path = Path(vue_dist_path)
        
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ dist
        if not self.vue_dist_path.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.vue_dist_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run build")
            return
        
        print(f"üìÅ –û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è –∏–∑: {self.vue_dist_path.absolute()}")
        print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.host}:{self.port}")
        print("üó∫Ô∏è  API –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø—É—Ç–∏: /map/")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        server = CustomHTTPServer(
            (self.host, self.port), 
            CombinedHandler, 
            vue_dist_path=str(self.vue_dist_path)
        )
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            server.server_close()
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üéØ C–µ—Ä–≤–µ—Ä (Vue + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
    server = VueLiveServer(port=8080, vue_dist_path='dist')
    server.start_server()